import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.2.0'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.2" apply false
}

def projectGroup = "event-logging-transformer"

//must be applied to all projects including root
apply plugin: 'ca.cutterslade.analyze'

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using propery [${propName}] with value [${val}]"
    } else {
        val = defaultValue
        println "Propery [${propName}] has no value, using default value [${val}]"
    }
    return val;
}

ext.versions = [
    //------event-logging--------------
    eventLogging: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------------3rd-party------------
    assertj: '3.6.2',
    javaDiffUtils: '4.0',
    jackson: '2.8.9',
    junit: '4.12',
    logback: '1.2.3',
    saxon: '9.6.0-6',
    slf4j: '1.7.22',
    systemRules: '1.19.0',
    zzDUMMYzz: 'makes sorting easier'
]

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.3'
}

allprojects {
    version versions.eventLogging
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'idea'

    group "$projectGroup"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
    }

    configurations {
        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"

            resolutionStrategy {
                dependencySubstitution {
                    substitute module('log4j:log4j') with module('org.slf4j:log4j-over-slf4j:$versions.slf4j')
                }

                forcedModules = [
                ]
            }
        }
    }
}

