// This file is imported by the docsy theme so that we can override aspects of
// the theme's styling or add in additional styles, e.g. for our own shortcodes.

@import 'shortcodes/_glossary.scss';
@import 'customisations/_landing-page.scss';
@import 'customisations/_top_navbar.scss';
@import 'customisations/_left-navbar.scss';
@import 'customisations/_right-navbar.scss';
@import 'customisations/_numbered-headings.scss';
@import 'customisations/_taxonomy.scss';


///////////////////
//  Breadcrumbs  //
///////////////////

// Hide nav breadcrumbs at the top level (i.e. single breadcrumb)
.td-breadcrumbs__single {
  display: none !important;
}


////////////////////
//  Page Content  //
////////////////////

// When clicking an heading link and jumping to the anchor the heading is
// hidden by the top bar so add this padding to ensure the heading anchor is
// visible
// This doesn't seem to be an issue in the docsy eample site. Not sure why.
html {
  scroll-padding-top: 60px; /* height of header */
}

// Our own custom box shadow class
.shadow-stroom {
  box-shadow: $box-shadow-stroom;
}

// Make code blocks use full width
.highlight {
  max-width: 100% !important;
}

// Restyle the fenced code blocks
.code-toolbar {
  //margin-bottom: 1.5rem;

  @media screen {
    //max-width: 80%; // Bring the width in line with the paragraph text
  }

  @media print {
    .toolbar {
      // No need for the copy button in print
      visibility: hidden;
    }
  }
}

// Restyle the content of the fenced code blocks

// Font size is too big in the code blocks
pre[class*=language-] {
  font-size: small !important;
}

// Stop selection of command line output
.command-line span.token.output {
	user-select: none;
}

// Fenced blocks of in-line files
.text-file pre {
  max-height:400px;
}

// Not sure if we want card decks to have the same width as the paragraphs
// as it limits them a bit when there are two or more across.
//.card-deck {
  //max-width: 80%; // Bring the width in line with the paragraph text
//}

// It is open for debate whether we want the fenced blocks and in line files
// to match the para width of fill the main content column. The former looks better
// but only if you don't have code that is wide and then is forced to horizontal
// scroll more often.
.text-file {
  @media screen {
    //max-width: 80%; // Bring the width in line with the paragraph text
    .code-toolbar {
      // The code box is normally 80% but as it is inside a card that is also
      // 80% width we need to bring it back up to 100% so it fills the card.
      //max-width: 100%; 
    }
  }
}

// When we print we want everything full width of the printed page
@media print {
  .col-xl-8 {
    flex: unset !important;
    max-width: unset !important;
  }
  .col-md-9 {
      flex: unset !important;
      max-width: unset !important;
  }
  .col-12 {
      flex: unset !important;
      max-width: unset !important;
  }
}

// Reduce the page level alerts down to roughly the width of the paragraph text.
@media screen {
  .pageinfo {
    max-width: 78%;
  }
}

// Restyle the cards
.card {
  @media screen {
    box-shadow: $box-shadow-stroom;
  }
}

// Fixes operators having a different background colour in syntax highlighted code blocks
// when using prism.js.
// See https://github.com/PrismJS/prism/issues/3274
.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {
  background: unset !important;
}

.external-link {
  // Handle long link text in external links
  overflow-wrap: anywhere;
}

