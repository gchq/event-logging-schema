# This file provides the repository specific config for the
# tag_release.sh script

# shellcheck disable=2034
{
  # The namespace/user on github, i.e. github.com/<namespace>
  # This should be the upstream namespace, not a fork.
  GITHUB_NAMESPACE='gchq'
  # The name of the git repository on github
  # This should be the upstream repo, not a fork.
  GITHUB_REPO='event-logging-schema'

  # Git tags should match this regex to be a release tag
  #RELEASE_VERSION_REGEX='^v[0-9]+\.[0-9]+.*$'

  # Finds version part but only in a '## [v1.2.3xxxxx]' heading
  #RELEASE_VERSION_IN_HEADING_REGEX="(?<=## \[)v[0-9]+\.[0-9]+[^\]]*(?=\])" 

  # Example git tag for use in help text
  TAG_EXAMPLE='v3.4.2'

  # Example of a tag that is older than TAG_EXAMPLE, for use in help text
  PREVIOUS_TAG_EXAMPLE="${TAG_EXAMPLE//2/1}"

  # The location of the change log relative to the repo root
  #CHANGELOG_FILENAME='CHANGELOG.md'

  # The path to the directory containing the unreleased changes
  # relative to the repo root
  #UNRELEASED_CHANGES_REL_DIR='unreleased_changes'

  # The name of the branch to compare unreleased changes to
  #UNRELEASED_CHANGES_COMPARE_BRANCH='master'

  # If you want to run any validation that is specific to this repo then uncomment
  # this function and implement some validation
  apply_custom_validation() {
    local -r schema_file="event-logging.xsd"

    if grep -q "\"(event-logging-v)?SNAPSHOT\"" "${schema_file}"; then
        error_exit "The Schema ${BLUE}${schema_file}${GREEN} contains" \
          "${BLUE}SNAPSHOT${GREEN} versions"
    fi

    # shellcheck disable=SC2154
    "${repo_root}/validateSchemaVersions.py" "${version}"
  }
}

