#Each pipeline configuration will be run against the sourceSchema

#pipelineName     - The name of the pipeline
#basePipelineName - The name of a pipeline that this pipeline extends, e.g. if pipeline X has transforms X1,X2 and
#                   pipeline Y has transforms Y1,Y2 and the base pipeline of X is Y, then the effective transforms of
#                   X will be Y1,Y2,X1,X2
#outputSuffix     - Optional suffix to apply to the generated xsd file and 'id' attribute,
#                   e.g. event-logging-v<majorVersion>-<suffix>.xsd
#                   e.g. id="event-logging-v<majorVersion>-<suffix>"
#outputBaseName   - Optional base name for the generated xsd file and 'id' attribute, if not supplied the
#                   name of the source schema will be used.
#                   e.g. <baseName>-v<majorVersion>-<suffix>.xsd.
#                   e.g. id="event-logging-v<majorVersion>-<suffix>"
#hasOutput        - True if this pipeline should produce a schema file
#transformations  - An ordered list of the xslt files that make up a pipeline of relative transformations.
#                   Each transformation will be applied to the result of the preceding transformation
#                   Each file must exist in the directory './transformations' where '.' is the directory
#                   of this configuration file.

# The name of the generated schema for an output pipeline will be of the form:
#   <outputBaseName>-vX<-outputSuffix>.xsd
# Where X is the major version of the generated schema as extracted from its 'version' attribute
# If outputBaseName is not set then the name of the source schema will be used as the outputBaseName

# The 'id' attribute of the generate for an output pipeline will be of the form:
#   <outputBaseName>-vX.Y.Z<-outputSuffix>
# Where X.Y.Z is the full version of the generated schema as copied from its 'version' attribute
# If outputBaseName is not set then the name of the source schema will be used as the outputBaseName

# As a general rule the XSLTs used in transformations should be kept small and do only one thing.
# This makes it easier to use just the bits you want in pipelines and makes testing the effect
# of a transformation easer.
#
# To test a transformation you can set it as the only transformation in the 'test' pipeline
# then do:
# ./gradlew runShadow; meld event-logging-transformer-main/pipelines/generated/{identity-v4-identity.xsd,test-v4-test.xsd}
# Which uses meld to diff the two generated schemas.

pipelines:

  # The complete schema, e.g for use in stroom. Includes all elements,
  # e.g. the complete user details.
  - pipelineName: "fullSchema"
    hasOutput: true
    transformations:
      - "ensureOccurrence.xsl"
      - "extractSimpleTypes.xsl"
      - "orderElements.xsl"
      - "removeVimModeline.xsl"
    modularise: true
          
  # A variant to be used by client systems and for use in producing the
  # JAXB Java API. Ommits much of the user details structure, the EventId and
  # adds Event as a root element for sending single events.
  - pipelineName: "client-variant"
    basePipelineName: "fullSchema"
    outputSuffix: "client"
    hasOutput: true
    transformations:
      - "jaxbEventRoot.xsl"
      - "jaxbNoEventId.xsl"
      - "jaxbNoUserDetails.xsl"
        # Sharing data is only intended for adding to received events
      - "removeSharingElement.xsl"

  # A varient that imposes limits on the values and occurances intended
  # for untrusted sources.
  - pipelineName: "safe-schema"
    basePipelineName: "fullSchema"
    outputSuffix: "safe"
    hasOutput: true
    transformations:
      - "addSafeStringSimpleType.xsl"
      - "replaceStringWithSafeString.xsl"
      - "removeMetaElement.xsl"
      - "removeSharingElement.xsl"
      - "removeAnyContentComplexType.xsl"
      - "limitOccurrence.xsl"
      - "limitDataElementRecursion.xsl"

  # This pipeline is used solely for creating a schema to validate the example
  # XML in the documentation. It should be identical to the fullSchema version
  # except for having a static version number.
  # The CI build won't release this schema
  - pipelineName: "documentation"
    basePipelineName: "fullSchema"
    outputSuffix: "documentation"
    hasOutput: true
    transformations:
      - "documentationVersionNumber.xsl"

  # This pipeline is for use in pipeline development, e.g. only include
  # orderElements.xsl then compare the output
  # schema to the one generated by the test pipeline.
  # The CI build won't release this schema
  - pipelineName: "identity"
    outputSuffix: "identity"
    outputBaseName: "identity"
    hasOutput: true
    transformations:
      - "orderElements.xsl"

  # This pipeline is for use in pipeline development, e.g. just include the
  # transformation under test then compare the output schema to the one
  # generated by the identity pipeline.
  # The CI build won't release this schema
  - pipelineName: "test"
    basePipelineName: "identity"
    outputSuffix: "test"
    outputBaseName: "test"
    hasOutput: true
    transformations:
      - "limitDataElementRecursion.xsl"
