def EXAMPLE_XML_DIR="../docs/content/en/docs/complete-examples"
def MASTER_SCHEMA_FILE_PATH="../event-logging.xsd"
def jarName = "event-logging-transformer-${versions.eventLogging}.jar"
def fatJarName = "event-logging-transformer-${versions.eventLogging}-all.jar"

// Extract the major version number from the master schema file
def masterSchemaFile = project.file(MASTER_SCHEMA_FILE_PATH)
def masterSchemaText = masterSchemaFile.text
def eventLoggingMajorVer = (masterSchemaText =~ /xmlns:evt="event-logging:([0-9]+)"/)[0][1]
def generatedDir = "pipelines/generated"

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// required for application plugin
mainClassName = "event.logging.transformer.SchemaGenerator"

jar {
    manifest {
        attributes(
                "Implementation-Title": "event-Logging-transformer",
                "Implementation-Version": versions.eventLogging,
                "Main-Class" : mainClassName
        )
    }
    archiveName jarName
}

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    archiveName fatJarName
}

// In this section you declare the dependencies for your production and test code
dependencies {
    
    // The production code uses the SLF4J logging API at compile time
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$versions.jackson"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$versions.jackson"
    compile "org.slf4j:slf4j-api:${versions.slf4j}"

    runtime "ch.qos.logback:logback-classic:${versions.logback}"
    runtime "net.sf.saxon:Saxon-HE:${versions.saxon}"

    testCompile "com.github.stefanbirkner:system-rules:${versions.systemRules}"
    testCompile "io.github.java-diff-utils:java-diff-utils:${versions.javaDiffUtils}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.assertj:assertj-core:${versions.assertj}"
}

run {
    args = ['pipelines', '../event-logging.xsd']
}

runShadow {
    args = ['pipelines', '../event-logging.xsd']
}

task transformersDist(type: Zip) {
    archiveName "transformations-${versions.eventLogging}.zip"
    from 'pipelines/transformations'
}


// Run the python script to validate all the version numbers in the schema file
task validateSchemaVersions(type: Exec) {
    workingDir '../'
    commandLine "python", "validateSchemaVersions.py", versions.eventLogging
}

// Run a bash script to compare the currennt jaxb source with the latest released version so
// we can see what impact schema changes have had on the library
task diffAgainstLatest(type: Exec) {
    dependsOn runShadow
    executable "../diffAgainstLatestReleases.sh"
    args "./pipelines"
}

// Find the non-client generated schema file for use in xml validation
def getSchemaFileForValidation = {  
    def pattern = ~/.*event-logging-v999-documentation\.xsd/
    def schemas = []
    def dir = project.file(generatedDir)
    dir.eachFileMatch(pattern) { file ->
        schemas.add(file)
    }
    if (schemas.size == 0) {
        throw new GradleException("Found no files matching pattern [${pattern}] in dir [${dir}]")
    } else if (schemas.size > 1) {
        throw new GradleException("Found multiple files [${schemas}] matching pattern [${pattern}] in dir [${dir}]")
    }
    return schemas[0]
}

// Validate any XML files found in EXAMPLE_XML_DIR (or sub directories of it) against the 
// non-client generated schema. This is to ensure that the examples are kept up to date 
// and to highlight breaking changes
task validateExampleXmlAgainstSchema() {
    dependsOn runShadow
    doLast {
        def schemaFile = getSchemaFileForValidation()
        if (!schemaFile.exists()) {
            throw new GradleException("Schema ${schemaFile} does not exist")
        }
        println "Validating all .xml and .xml.md files in [${EXAMPLE_XML_DIR}] against schema [${schemaFile}]"
        def foundExampleXmlFile = false
        fileTree(dir: project.file(EXAMPLE_XML_DIR))
            .include('**/*.xml')
            .include('**/*.xml.md')
            .each { xmlFile -> 
                foundExampleXmlFile = true
                def xmlFilePath = xmlFile.absolutePath
                //println "  Validating ${xmlFilePath} against the schema"
                def execResult = exec() {
                    //xmlint is available in libxml2-utils
                    executable '../validateExampleXml.sh'
                    args schemaFile.absolutePath, xmlFilePath
                    ignoreExitValue true
                }

                if (execResult.exitValue != 0) {
                    throw new GradleException("XML file ${xmlFilePath} failed vaildation, or 'xmllint' (in 'libxml2-utils' pkg) is not installed ")
                }
        }
        if (!foundExampleXmlFile) {
            throw new GradleException("No example files found in ${EXAMPLE_XML_DIR}, that implies a problem.")
        }
    }
}

// run the transformer code to build the schemas from the configured pipelines
tasks.build.dependsOn runShadow
tasks.build.dependsOn transformersDist
tasks.build.dependsOn diffAgainstLatest
tasks.build.dependsOn validateExampleXmlAgainstSchema

tasks.compileJava.dependsOn validateSchemaVersions

//list to hold details of any failed test classes
def failedTestReportFiles = []

test {
    // Use full logging for test exceptions so we can see where the failure occurred 
    testLogging {
        events "failed"
        exceptionFormat = 'full'
        showStackTraces = true
    }

    afterSuite { desc, result -> 
        if (desc != null && desc.className != null && result.resultType.toString() == "FAILURE") {
            //test class failed so add its project info and test report file to a global list for
            //processing at the end of the build
            def reportFileName = "${reports.junitXml.destination}/TEST-${desc.className}.xml"
            def reportFile = file(reportFileName)
            def pair = new Tuple2("${project.name} ${desc.name}", reportFile)
            failedTestReportFiles.add(pair)
        }
    }
}

gradle.buildFinished {
    //if any of the tests failed dump the junit xml to the console
    //this is useful for running in travis where you have no access to the test output files
    if (getPropertyOrDefault('dumpFailedTestXml', 'false') == 'true' && failedTestReportFiles.size > 0) {
        println "Build has ${failedTestReportFiles.size} failed test classes, dumping JUnit xml output"
        failedTestReportFiles.each { pair -> 
            def info = pair.first
            def reportFile = pair.second

            if (reportFile.exists()) {
                println "-----Failed test class ${info} ------------------"
                def lines = reportFile.readLines()
                lines.each { String line -> 
                    println "${line}"
                }
                println "-----End of test class ${info} ------------------"
            } else {
                println "File ${reportFile.toString()}"
            }
        }
    }
}

clean {
    delete 'pipelines/generated'
    delete 'pipelines/downloaded'
}
